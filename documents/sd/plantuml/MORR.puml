@startuml MORR
skinparam monochrome true
skinparam linetype ortho
skinparam classAttributeIconSize 0

left to right direction
hide empty fields

package "MORR" {
    !startsub TRANSCODING
    package "TRANSCODING" #E6E6E6 {
        package "MPEG" #BFBFBF {
            class MPEGDecoder {

            }

            class MPEGEncoder {

            }

            class DesktopCapture {
                + <<creates>> DesktopCapture(device: IDirect3DDevice, item: GraphicsCaptureItem, size: SizeInt32)
            }

            class CaptureHelper <<static>> {
                + <<static>> CanCreateItemWithoutPicker: bool
                + <<static>> CreateItemForMonitor(hmon: IntPtr) : GraphicsCaptureItem
            }

            class Direct3D11Helpers <<static>> {
                + <<static>> CreateDevice(useWARP: bool) : IDirect3DDevice
                ~ <<static>> CreateDirect3DSufaceFromSharpDXTexture(texture: Texture2D) : IDirect3DSurface
                ~ <<static>> CreateSharpDXDevice(device: IDirect3DDevice) : Device
                ~ <<static>> CreateSharpDXTexture2D(surface: IDirect3DSurface) : Texture2D
            }

            class MonitorInfo {
                + IsPrimary: bool
                + ScreenSize: Vector2
                + DeviceName: string
                + Hmon: IntPtr
                + MonitorArea: Rect
                + WorkArea: Rect
            }

            class MonitorInfoEx {
                + Size: int
                + Flags: uint
                + DeviceName: string
                + WorkArea: Rect
                + Monitor: Rect
            }

            class MonitorEnumerationHelper <<static>> {
                + <<static>> GetMonitors() : IEnumerable<MonitorInfo>
            }
        }

        package "CSV" #BFBFBF {
            class CSVDecoder {

            }

            class CSVEncoder {

            }
        } 

        class CaptureException {
        
        }

        class VideoCaptureException {

        }

        interface IMetadataCapture {
            + NextSample() : MetadataSample
        }

        interface IMetadataDeserializer {

        }
        
        interface IVideoCapture {
            + NextSample() : VideoSample
        }

        abstract class MetadataSample {

        }

        abstract class VideoSample {

        }

        class VideoDecodingException {

        }

        class MetadataDecodingException {

        }

        class VideoEncodingException {

        }

        class MetadataEncodingException {

        }

        class DecodingException {

        }

        class EncodingException {

        }

        interface IDecoder {
            + IsDecoding : bool <<get>> <<set>>
            + DecodingPath : string <<get>> <<set>>
            + <<event>> VideoSampleDecoded : VideoSampleDecodedEventHandler 
            + <<event>> MetadataSampleDecoded : MetadataSampleDecodedEventHandler 
        }
    
        interface IEncoder {
            + IsEncoding : bool <<get>> <<set>>
            + EncodingPath : string <<get>> <<set>>
            + <<event>> VideoSampleRequested : VideoSampleRequestedEventHandler 
            + <<event>> MetadataSampleRequested : MetadataSampleRequestedEventHandler 
        }

        class DecodingException {

        }

        class EncodingException {

        }
    }
    !endsub

    !startsub CORE
    package "CORE" #E6E6E6 {
        class RecordingManager {
            - encoder : IEncoder
            - decoder : IDecoder
            - videoCapture : IVideoCapture
            + IsRecording : bool <<get>> <<private set>>
            + EventQueues : IEnumerable<EventQueue<Event>> <<get>> <<private set>>
            + StartRecording() : void
            + StopRecording() : void
            + StartDecoding() : void
            + StopDecoding() : void
        }

        interface IRecordingManager {
            + IsRecording : bool <<get>>
            + StartRecording() : void
            + StopRecording() : void
            + StartDecoding() : void
            + StopDecoding() : void
        }

        class ModuleManager {
            + InitializeModules() : void
        }
        interface IModuleManager {
            + Modules : IEnumerable<IModule> <<get>>
            + CollectingModules : IEnumerable<ICollectingModule> <<get>>
            + ModuleConfiguration : GlobalModuleConfiguration <<get>>
            + InitializeModules() : void
        }

        class Bootstrapper {
            + LoadAssemblies(moduleManager:ModuleManager) : void
        }

        interface IBootstrapper {
            + ComposeImports(@object:object) : void
        }

        class ConfigurationManager {
            + LoadConfiguration(path:string) : void
        }
        interface IConfigurationManager {
            + LoadConfiguration(path:string) : void
            + Configurations : IEnumerable<IConfiguration> <<get>>
        }

        class InvalidConfigurationException {

        }
    }
    !endsub

    !startsub UI
    package "UI" #E6E6E6 {
        class ErrorDialog <<partial>> {
            + ErrorDialog(errorMessage:string)
            + ErrorMessage : string <<get>>
        }

        class InformationDialog <<partial>> {
            + InformationDialog()
        }

        class SaveDialog <<partial>> {
            + SaveDialog()
        }

        class ApplicationViewModel {
            + ApplicationViewModel()
            + IsRecording : bool <<get>> <<set>>
        }
        
        class NotifyIcon {
            + NotifyIcon()
            + Tooltip : string <<get>> <<set>>
            + CommandParameter : object <<get>> <<set>>
        }
        
        class RelayCommand {
            + RelayCommand(execute:Action<object>, canExecute:Predicate<object>?)
            + CanExecute(parameter:object) : bool
            + Execute(parameter:object) : void
        }

        interface ICommand {

        }

        class ContextMenu {

        }

        class ImageSource {

        }

        class App <<partial>> {

        }        
    }
    !endsub

    !startsub CLI
    package "CLI" #E6E6E6 {
        class Program {
            {static} Main(args:string[]) : void
        }
        
        class Options {

        }

        class ICLICommand {
            + ExecuteCommand(options: Options)
        }

        class ProcessOptions {
            + Input : string
            + Output : string
            + ProcessingEnabled: bool
            + Verbose: bool
        }
    
        class OutputFormatter {
            + PrintMessage(message: string, verbose: bool) : void
            + PrintException(exception: Exception) : void
        }
    
        class ProcessCommand {
            + ProcessCommand(recordingManager : IRecordingManager)
            + ExecuteCommand(options: ProcessOptions)
        }
    }
    !endsub

    package "MODULES" #E6E6E6 {
        !startsub MODULES_CLIPBOARD
        package "CLIPBOARD" #BFBFBF {
            class ClipboardModule {
            
            }

            abstract class ClipboardEvent {
            
            }

            class ClipBoardInteractEvent {
                + Text : string <<get>> <<set>>
            }

            enum InteractionType {
                CLEAR
                COPY
                CUT
                PASTE
            }
        }
        !endsub

        !startsub MODULES_KEYBOARD
        package "KEYBOARD" #BFBFBF {
            class KeyboardModule {
            
            }

            abstract class KeyboardEvent {
            }
            
            class KeyBoardInteractEvent {
                + PressedKey: Key
            }
        }
        !endsub

        !startsub MODULES_MOUSE
        package "MOUSE" #BFBFBF {
            class MouseModule {
        
            }

            
            abstract class MouseEvent {
            }

            class MouseMoveEvent {
                + Movement: Vector2
            }

            enum MouseButton {
                LEFT,
                CENTER,
                RIGHT
            }

            enum MouseButtonState {

            }
            
            class MouseClickEvent {
                + HWnd: IntPtr
            }
            
            class MouseScrollEvent {
                + HWnd: IntPtr
                + ScrollAmount : short <<get>> <<set>>
            }
        }
        !endsub

        !startsub MODULES_WEBBROWSER
        package "WEBBROWSER" #BFBFBF {
            class WebBrowserModule {
        
            }

            class ButtonClickEvent {
                + Button : string <<get>> <<set>>
                + URL: Uri
            }
            
            class CloseTabEvent {
            }
            
            class FileDownloadEvent {
                + MIMEType : string <<get>> <<set>>
                + FileURL: Uri
            }
            
            class HoverEvent {
                + HoveredElement : string <<get>> <<set>>
            }
            class NavigationEvent {
            }
            
            class OpenTabEvent {
            }
            
            class SwitchTabEvent {
                + NewTabID: Guid
            }
            
            class TextInputEvent {
                + InputtedText : string <<get>> <<set>>
                + Textbox : string <<get>> <<set>>
            }
            
            class TextSelectionEvent {
                + SelectedText : string <<get>> <<set>>
            }
            
            abstract class WebBrowserEvent {
                + TabID: Guid
                + CurrentURL: Uri
            }
        }
        !endsub

        !startsub MODULES_WINDOWMANAGEMENT
        package "WINDOWMANAGEMENT" #BFBFBF {
            class WindowManagementModule {
        
            }

            abstract class WindowEvent {
                + Title : string <<get>> <<set>>
                + ProcessName : string <<get>> <<set>>
            }
            
            class WindowFocusEvent {

            }

            class WindowMovementEvent {
                + OldLocation: Vector2
                + NewLocation: Vector2
            }

            class WindowResizingEvent {
                + OldSize: Size
                + NewSize: Size
            }

            class WindowStateChangedEvent {
                + State: WindowState
            }
        }
        !endsub
    }

    !startsub SHARED
    package "SHARED" #E6E6E6 {
        interface IConfiguration {
            + Parse(configuration:string) : void
        }

        abstract class Event {
            + Timestamp: DateTime
            + IssuingModule: Guid
            + Type: Type
            + Serialize() : string
            + Deserialize(serialized:string) : void
        }

        interface IModule {
            + IsEnabled : bool <<get>> <<set>>
            + Initialize() : void
            + Identifier: Guid
        }

        interface ICollectingModule {
        
        }

        interface IReceivingModule {
        
        }

        interface ITransformingModule {
        
        }

        abstract class "EventQueue<T> where T : Event" {
            + StorageStrategy : IEventQueueStorageStrategy<T> <<get>> <<set>>
            + {abstract} GetEvents() : IAsyncEnumerable<T>
            # {abstract} Enqueue(T @event) : void
        }

        interface "IReadOnlyEventQueue<out T> where T : Event" {
            GetEvents() : IAsyncEnumerable<T>
        }

        interface "IEventQueueStorageStrategy<T> where T : Event" {
            + GetEvents() : IAsyncEnumerable<T>
            + Enqueue(T @event) : void
        }
        class "KeepAllStorageStrategy<T> where T : Event" {
            + GetEvents() : IAsyncEnumerable<T>
            + Enqueue(T @event) : void
        }
        class "RefCountedListStorageStrategy<T> where T : Event" {
            + GetEvents() : IAsyncEnumerable<T>
            + Enqueue(T @event) : void
        }
        class "RingBufferStorageStrategy<T> where T : Event" {
            + Capacity : uint <<get>> <<set>>
            + GetEvents() : IAsyncEnumerable<T>
            + Enqueue(T @event) : void
        }
    }
    !endsub
    ' CLI
    IRecordingManager <-- ProcessCommand
    Program --> IRecordingManager
    !startsub CLI_INTERNAL
    Program --> "1" OutputFormatter
    Program o--> ICLICommand
    ICLICommand ..> Options : uses
    ICLICommand <|-- ProcessCommand
    Options <|-- ProcessOptions
    ProcessCommand ..> ProcessOptions: uses
    !endsub

    ' Exceptions
    !startsub EXCEPTIONS
    CaptureException <|-- VideoCaptureException

    DecodingException <|-- VideoDecodingException
    DecodingException <|-- MetadataDecodingException

    EncodingException <|-- VideoEncodingException
    EncodingException <|-- MetadataEncodingException

    IEncoder ..> VideoEncodingException : throws >
    IEncoder ..> MetadataEncodingException : throws >

    IDecoder ..> VideoDecodingException : throws >
    IDecoder ..> MetadataDecodingException : throws >
    !endsub

    ' EventQueue
    !startsub EVENTQUEUES
    "IReadOnlyEventQueue<out T> where T : Event" <|-- "EventQueue<T> where T : Event"
    "IEventQueueStorageStrategy<T> where T : Event" <|-- "KeepAllStorageStrategy<T> where T : Event"
    "IEventQueueStorageStrategy<T> where T : Event" <|-- "RefCountedListStorageStrategy<T> where T : Event"
    "IEventQueueStorageStrategy<T> where T : Event" <|-- "RingBufferStorageStrategy<T> where T : Event"
    "EventQueue<T> where T : Event" --> "IEventQueueStorageStrategy<T> where T : Event"
    !endsub

    !startsub SHARED_INTERNAL
    ' Modules
    IModule <|-- ICollectingModule
    IModule <|-- IReceivingModule
    IModule <|-- ITransformingModule
    !endsub


    ' CORE
    ConfigurationManager --> "*" IConfiguration
    ConfigurationManager --> InvalidConfigurationException : throws
    ModuleManager --> "*" IModule
    ModuleManager --> "*" ICollectingModule

    RecordingManager --> "encoder" IEncoder
    RecordingManager --> "decoder" IDecoder
    RecordingManager --> "videoCapture" IVideoCapture
    RecordingManager --> "metadataCapture" IMetadataCapture
    RecordingManager --> "metadataDeserializer" IMetadataDeserializer 
    !startsub CORE_INTERNAL
    RecordingManager --> "ConfigurationManager" IConfigurationManager
    RecordingManager --> "ModuleManager" IModuleManager
    RecordingManager ..> IBootstrapper : uses
    IBootstrapper <|-- Bootstrapper
    IConfigurationManager <|-- ConfigurationManager
    IModuleManager <|-- ModuleManager
    IRecordingManager <|-- RecordingManager
    !endsub

    'Clipboard
    ICollectingModule <|-- ClipboardModule
    Event <|-- ClipboardEvent
    !startsub MODULES_CLIPBOARD_INTERNAL
    ClipboardEvent <|-- ClipBoardInteractEvent
    ClipBoardInteractEvent --> "Interaction" InteractionType
    ClipBoardInteractEvent +-- InteractionType
    !endsub

    ' Keyboard
    Event <|-- KeyboardEvent
    ICollectingModule <|-- KeyboardModule
    !startsub MODULES_KEYBOARD_INTERNAL
    KeyboardEvent <|-- KeyBoardInteractEvent
    !endsub

    ' Mouse
    Event <|-- MouseEvent
    ICollectingModule <|-- MouseModule
    !startsub MODULES_MOUSE_INTERNAL
    MouseEvent <|-- MouseClickEvent
    MouseEvent <|-- MouseScrollEvent
    MouseEvent <|-- MouseMoveEvent
    MouseClickEvent --> "Button" MouseButton
    MouseClickEvent --> "State" MouseButtonState
    !endsub

    ' WebBrowser
    Event <|-- WebBrowserEvent
    ICollectingModule <|-- WebBrowserModule
    !startsub MODULES_WEBBROWSER_INTERNAL
    WebBrowserEvent <|-- ButtonClickEvent
    WebBrowserEvent <|-- CloseTabEvent
    WebBrowserEvent <|-- FileDownloadEvent
    WebBrowserEvent <|-- HoverEvent
    WebBrowserEvent <|-- NavigationEvent
    WebBrowserEvent <|-- OpenTabEvent
    WebBrowserEvent <|-- SwitchTabEvent
    WebBrowserEvent <|-- TextInputEvent
    WebBrowserEvent <|-- TextSelectionEvent
    !endsub

    ' WindowManagement
    Event <|-- WindowEvent
    ICollectingModule <|-- WindowManagementModule
    !startsub MODULES_WINDOWMANAGEMENT_INTERNAL
    WindowEvent <|-- WindowFocusEvent
    WindowEvent <|-- WindowMovementEvent
    WindowEvent <|-- WindowResizingEvent
    WindowEvent <|-- WindowStateChangedEvent
    !endsub

    ' Transcoding
    IReceivingModule <|-- IMetadataCapture
    !startsub TRANSCODING_INTERNAL
    IDecoder ..> MetadataSample : uses
    IEncoder ..> MetadataSample : uses
    IVideoCapture ..> VideoSample : <<creates>>
    IVideoCapture ..> VideoCaptureException : throws >
    !endsub

    ' MPEG
    !startsub TRANSCODING_MPEG_INTERNAL
    IVideoCapture <|-- DesktopCapture
    DesktopCapture ..> Direct3D11Helpers : uses
    DesktopCapture ..> CaptureHelper : uses
    IEncoder <|-- MPEGEncoder
    IDecoder <|-- MPEGDecoder

    MPEGEncoder ..> DesktopCapture : uses
    MPEGEncoder ..> MonitorEnumerationHelper : uses
    MonitorEnumerationHelper ..> MonitorInfo : uses
    MonitorEnumerationHelper ..> MonitorInfoEx : uses
    !endsub
    ' CSV
    IEncoder <|-- CSVEncoder
    IDecoder <|-- CSVDecoder

    ' UI
    ApplicationViewModel --> "1" IRecordingManager : uses
    !startsub UI_INTERNAL
    ApplicationViewModel o--> "n" ICommand
    App --> "1" ApplicationViewModel
    ApplicationViewModel o-> SaveDialog
    ApplicationViewModel o-> ErrorDialog
    ApplicationViewModel o-> InformationDialog
    App o-> NotifyIcon
    NotifyIcon --> "IconSource" ImageSource
    NotifyIcon --> "Command" ICommand
    NotifyIcon --> "ContextMenu" ContextMenu
    ICommand <|-- RelayCommand
    !endsub
}
@enduml
